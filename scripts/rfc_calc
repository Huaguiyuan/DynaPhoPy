#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import argparse

import dynaphopy.interface.phonopy_link as pho_interface
import dynaphopy.interface.iofile as reading

parser = argparse.ArgumentParser(description='rfc_calc options')
parser.add_argument('input_file', metavar='data_file', type=str, nargs=1,
                    help='input file containing structure related data')

group = parser.add_mutually_exclusive_group (required=True)
group.add_argument('-cp', action='store_true',
                   help='Get commensurate points')
group.add_argument('frequency_file', metavar='data_file', type=str, nargs='?',
                    help='input file containing renormalized phonon frequencies')

parser.add_argument('-p', action='store_true',
                   help='plot bands')

parser.add_argument('-s', metavar='FORCE_CONSTANTS', type=str, nargs=1,
                    help='save force_constants into a file')

parser.add_argument('--fcsymm', action='store_true',
                    help='symmetrize force constants')

args = parser.parse_args()

def get_renormalized_constants(freq_filename, structure, symmetrize=False, degenerate=True):

    structure.set_force_set(pho_interface.get_force_sets_from_file(file_name=input_parameters['force_constants_file_name']))

    com_points = pho_interface.get_commensurate_points(structure)

    renormalized_frequencies = np.loadtxt(freq_filename)
    renormalized_force_constants = pho_interface.get_renormalized_force_constants(renormalized_frequencies,
                                                                                  com_points,
                                                                                  structure,
                                                                                  symmetrize=symmetrize,
                                                                                  degenerate=degenerate)

    return  renormalized_force_constants

def plot_renormalized_phonon_bands(structure, renormalized_force_constants):
    bands = pho_interface.obtain_phonon_dispersion_bands(structure,
                                                         input_parameters['_band_ranges'],
                                                         NAC=False)

    renormalized_bands = pho_interface.obtain_renormalized_phonon_dispersion_bands(structure,
                                                                                  input_parameters['_band_ranges'],
                                                                                  renormalized_force_constants,
                                                                                  NAC=False)

    for i,freq in enumerate(renormalized_bands[1]):
        plt.plot(bands[1][i],bands[2][i],color ='b', label='Harmonic (0K)')
        plt.plot(renormalized_bands[1][i],renormalized_bands[2][i],color ='r', label='Renormalized')
        plt.axes().get_xaxis().set_visible(False)
    plt.axes().get_xaxis().set_ticks([])
    plt.ylabel('Frequency [THz]')
    plt.xlabel('Wave vector')
    plt.xlim([0, renormalized_bands[1][-1][-1]])
    plt.axhline(y=0, color='k', ls='dashed')
    plt.suptitle('Renormalized phonon dispersion')
    handles, labels = plt.gca().get_legend_handles_labels()
    plt.legend([handles[0], handles[-1]], ['Harmonic','Renormalized'])
    plt.show()



# Get data from input file & process parameters
input_parameters = reading.read_parameters_from_input_file(args.input_file[0])

if 'structure_file_name_outcar' in input_parameters:
    structure = reading.read_from_file_structure_outcar(input_parameters['structure_file_name_outcar'])
else:
    structure = reading.read_from_file_structure_poscar(input_parameters['structure_file_name_poscar'])
    structure.get_data_from_dict(input_parameters)

# Process options
if args.cp:
    com_points = pho_interface.get_commensurate_points(structure)
    print(com_points)
    exit()

renormalized_force_constants = get_renormalized_constants(args.frequency_file, structure, symmetrize=args.fcsymm)

if args.s:
    pho_interface.write_FORCE_CONSTANTS(renormalized_force_constants,filename=args.s[0])
if args.p:
    plot_renormalized_phonon_bands(structure, renormalized_force_constants)